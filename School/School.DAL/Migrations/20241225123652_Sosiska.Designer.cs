// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using School.DAL;

namespace School.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241225123652_Sosiska")]
    partial class Sosiska
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("School.Domain.Models.Products", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Id_Category")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Opisanie")
                        .HasColumnType("text");

                    b.Property<string>("PathImage")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.CartDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("createdAt");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.CartItemsDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnName("CartId");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("Price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("ProductId");

                    b.Property<Guid?>("ProductsDbId1")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductsDbId1");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.CategoryDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("createdAt");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.OrdersDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("createdAt");

                    b.Property<Guid>("Id_Product")
                        .HasColumnType("uuid")
                        .HasColumnName("id_product");

                    b.Property<Guid>("Id_User")
                        .HasColumnType("uuid")
                        .HasColumnName("id_user");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid?>("UserDbId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserDbId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.PictureProductDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("Id_Product")
                        .HasColumnType("uuid")
                        .HasColumnName("id_product");

                    b.Property<string>("PathImage")
                        .HasColumnType("text")
                        .HasColumnName("pathImage");

                    b.HasKey("Id");

                    b.ToTable("picture_product");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.ProductsDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("createdAt");

                    b.Property<Guid>("Id_Category")
                        .HasColumnType("uuid")
                        .HasColumnName("id_category");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Opisanie")
                        .HasColumnType("text")
                        .HasColumnName("opisanie");

                    b.Property<Guid?>("OrdersDbId")
                        .HasColumnType("uuid");

                    b.Property<string>("PathImage")
                        .HasColumnType("text")
                        .HasColumnName("pathImg");

                    b.Property<Guid?>("PictureProductDbId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("Id_Category");

                    b.HasIndex("OrdersDbId");

                    b.HasIndex("PictureProductDbId");

                    b.ToTable("products");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.RequestDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("createdAt");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("Id_Order")
                        .HasColumnType("uuid")
                        .HasColumnName("Id_order");

                    b.Property<Guid>("Id_User")
                        .HasColumnType("uuid")
                        .HasColumnName("id_user");

                    b.Property<Guid?>("OrdersDbId")
                        .HasColumnType("uuid");

                    b.Property<string>("PathImage")
                        .HasColumnType("text")
                        .HasColumnName("pathImage");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid?>("UserDbId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrdersDbId");

                    b.HasIndex("UserDbId");

                    b.ToTable("request");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.UserDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("createdAt");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PathImage")
                        .HasColumnType("text")
                        .HasColumnName("pathImage");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.CartItemsDb", b =>
                {
                    b.HasOne("School.Domain.ModelsDb.CartDb", "CartDb")
                        .WithMany("CartItemDb")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("School.Domain.ModelsDb.ProductsDb", "ProductsDb")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("School.Domain.ModelsDb.ProductsDb", null)
                        .WithMany("CartItemDb")
                        .HasForeignKey("ProductsDbId1");

                    b.Navigation("CartDb");

                    b.Navigation("ProductsDb");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.OrdersDb", b =>
                {
                    b.HasOne("School.Domain.ModelsDb.UserDb", "UserDb")
                        .WithMany("ordersDb")
                        .HasForeignKey("UserDbId");

                    b.Navigation("UserDb");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.ProductsDb", b =>
                {
                    b.HasOne("School.Domain.ModelsDb.CategoryDb", "CategoryDb")
                        .WithMany("ProductsDb")
                        .HasForeignKey("Id_Category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("School.Domain.ModelsDb.OrdersDb", null)
                        .WithMany("ProductsDb")
                        .HasForeignKey("OrdersDbId");

                    b.HasOne("School.Domain.ModelsDb.PictureProductDb", null)
                        .WithMany("Products")
                        .HasForeignKey("PictureProductDbId");

                    b.Navigation("CategoryDb");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.RequestDb", b =>
                {
                    b.HasOne("School.Domain.ModelsDb.OrdersDb", "OrdersDb")
                        .WithMany("RequestsDb")
                        .HasForeignKey("OrdersDbId");

                    b.HasOne("School.Domain.ModelsDb.UserDb", "UserDb")
                        .WithMany("requestDbs")
                        .HasForeignKey("UserDbId");

                    b.Navigation("OrdersDb");

                    b.Navigation("UserDb");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.CartDb", b =>
                {
                    b.Navigation("CartItemDb");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.CategoryDb", b =>
                {
                    b.Navigation("ProductsDb");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.OrdersDb", b =>
                {
                    b.Navigation("ProductsDb");

                    b.Navigation("RequestsDb");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.PictureProductDb", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.ProductsDb", b =>
                {
                    b.Navigation("CartItemDb");
                });

            modelBuilder.Entity("School.Domain.ModelsDb.UserDb", b =>
                {
                    b.Navigation("ordersDb");

                    b.Navigation("requestDbs");
                });
#pragma warning restore 612, 618
        }
    }
}
